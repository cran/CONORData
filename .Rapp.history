verts
70/12
rgl.open()
lines3d(1,1,1)
lines3d(c(1,1),c(1,1),c(1,2))
source("~/Downloads/JasonScript/RtcsFunctions.R")
#
}
	tcsVertices <- diag(4)#
	cartVertices <- cartCoord(tcsVertices)
tcsVertices
cartVertices
cartVertices[1,2]
cartVertices[1:2,2]
drawTcs <- function(){#
	tcsVertices <- diag(4)#
	cartVertices <- cartCoord(tcsVertices)	#
	rgl.open()#
	for (i in 1:4){#
		for(j in 1:4){#
			lines3d(cartVertices[c(i,j),1],cartVertices[c(i,j),2],cartVertices[c(i,j),3])#
		}#
	}#
}
drawTcs()
drawTcs <- function(){#
	tcsVertices <- diag(4)#
	cartVertices <- cartCoord(tcsVertices)	#
	rgl.open()#
	for (i in 1:4){#
		for(j in 1:4){#
			lines3d(cartVertices[c(i,j),1],cartVertices[c(i,j),2],cartVertices[c(i,j),3])#
		}#
	}#
}#
#
plotPoints <- function(coordinates){#
	points3d(coordinates[,1],coordinates[,2],coordinates[,3])#
}
plotPoints(c(.5,.5,.5))
plotPoints(matrix(c(.5,.5,.5),1,3))
rgl.bg(color="white")
drawTcs <- function(bg.color="white"){#
	tcsVertices <- diag(4)#
	cartVertices <- cartCoord(tcsVertices)	#
	rgl.open()#
	for (i in 1:4){#
		for(j in 1:4){#
			lines3d(cartVertices[c(i,j),1],cartVertices[c(i,j),2],cartVertices[c(i,j),3])#
		}#
	}#
	rgl.bg(color=bg.color)#
	rgl.text(cartVertices[1,],text="u")#
	rgl.text(cartVertices[2,],text="s")#
	rgl.text(cartVertices[3,],text="m")#
	rgl.text(cartVertices[4,],text="l")#
}#
#
plotPoints <- function(coordinates){#
	points3d(coordinates[,1],coordinates[,2],coordinates[,3])#
}
drawTcs()
drawTcs <- function(bg.color="white"){#
	tcsVertices <- diag(4)#
	cartVertices <- cartCoord(tcsVertices)	#
	rgl.open()#
	for (i in 1:4){#
		for(j in 1:4){#
			lines3d(cartVertices[c(i,j),1],cartVertices[c(i,j),2],cartVertices[c(i,j),3])#
		}#
	}#
	rgl.bg(color=bg.color)#
	rgl.texts(cartVertices[1,],text="u")#
	rgl.texts(cartVertices[2,],text="s")#
	rgl.texts(cartVertices[3,],text="m")#
	rgl.texts(cartVertices[4,],text="l")#
}#
#
plotPoints <- function(coordinates){#
	points3d(coordinates[,1],coordinates[,2],coordinates[,3])#
}
drawTcs()
drawTcs <- function(bg.color="white"){#
	tcsVertices <- diag(4)#
	cartVertices <- cartCoord(tcsVertices)	#
	rgl.open()#
	for (i in 1:4){#
		for(j in 1:4){#
			lines3d(cartVertices[c(i,j),1],cartVertices[c(i,j),2],cartVertices[c(i,j),3])#
		}#
	}#
#	rgl.bg(color=bg.color)#
	rgl.texts(cartVertices[1,],text="u")#
	rgl.texts(cartVertices[2,],text="s")#
	rgl.texts(cartVertices[3,],text="m")#
	rgl.texts(cartVertices[4,],text="l")#
}#
#
plotPoints <- function(coordinates){#
	points3d(coordinates[,1],coordinates[,2],coordinates[,3])#
}
drawTcs()
drawTcs <- function(bg.color="white",line.color="black"){#
	tcsVertices <- diag(4)#
	cartVertices <- cartCoord(tcsVertices)	#
	rgl.open()#
	for (i in 1:4){#
		for(j in 1:4){#
			lines3d(cartVertices[c(i,j),1],cartVertices[c(i,j),2],cartVertices[c(i,j),3],color=line.color)#
		}#
	}#
#	rgl.bg(color=bg.color)#
	rgl.texts(cartVertices[1,],text="u")#
	rgl.texts(cartVertices[2,],text="s")#
	rgl.texts(cartVertices[3,],text="m")#
	rgl.texts(cartVertices[4,],text="l")#
}#
#
plotPoints <- function(coordinates){#
	points3d(coordinates[,1],coordinates[,2],coordinates[,3])#
}
drawTcs <- function(bg.color="white",line.color="black"){#
	tcsVertices <- diag(4)#
	cartVertices <- cartCoord(tcsVertices)	#
	rgl.open()#
	for (i in 1:4){#
		for(j in 1:4){#
			lines3d(cartVertices[c(i,j),1],cartVertices[c(i,j),2],cartVertices[c(i,j),3],color=line.color)#
		}#
	}#
	rgl.bg(color=bg.color)#
	rgl.texts(cartVertices[1,],text="u")#
	rgl.texts(cartVertices[2,],text="s")#
	rgl.texts(cartVertices[3,],text="m")#
	rgl.texts(cartVertices[4,],text="l")#
}#
#
plotPoints <- function(coordinates){#
	points3d(coordinates[,1],coordinates[,2],coordinates[,3])#
}
drawTcs()
drawTcs <- function(bg.color="white",line.color="black"){#
	tcsVertices <- diag(4)#
	cartVertices <- cartCoord(tcsVertices)	#
	rgl.open()#
	for (i in 1:4){#
		for(j in 1:4){#
			lines3d(cartVertices[c(i,j),1],cartVertices[c(i,j),2],cartVertices[c(i,j),3],color=line.color)#
		}#
	}#
	rgl.bg(color=bg.color)#
	rgl.texts(cartVertices[1,],text="u",color=line.color)#
	rgl.texts(cartVertices[2,],text="s",color=line.color)#
	rgl.texts(cartVertices[3,],text="m",color=line.color)#
	rgl.texts(cartVertices[4,],text="l",color=line.color)#
}#
#
plotPoints <- function(coordinates){#
	points3d(coordinates[,1],coordinates[,2],coordinates[,3])#
}
drawTcs()
R.home()
?R.home
install.packages("rJava")
install.packages("rj")
23493/25005
integer(3)
real(3)
float(3)
double(3)
?character
4*12+7
6*12+7
?install
??install
library(CONOR)
?dwd
citation()
citation(CONOR)
citation("CONOR")
library(CONOR)
?dwd
#
#Load the Affymetrix data from the Microarray Quality Control Project (MAQC, Shi et al, 2006)#
data(MAQC.AFX)#
#
#Load the Illumina data from MAQC#
data(MAQC.ILM)#
#
#Perform Distance Weighted Discrimination (Takes 2-3 minutes, Benito et al, 2004)#
dwd.output <- dwd(platform1.data=AFX, platform2.data=ILM, skip.match=TRUE)#
#
#Plot the AFX sample A data against the ILM sample A data#
plot(rowMeans(dwd.output$x[regexpr("_A",colnames(dwd.output$x)) != -1]), #
	 rowMeans(dwd.output$x[regexpr("_A",colnames(dwd.output$y)) != -1]),#
	 xlab="AFX", ylab="ILM")
library(CONOR)
?dwd
#
#Load the Affymetrix data from the Microarray Quality Control Project (MAQC, Shi et al, 2006)#
data(MAQC.AFX)#
#
#Load the Illumina data from MAQC#
data(MAQC.ILM)#
#
#Perform Distance Weighted Discrimination (Takes 2-3 minutes, Benito et al, 2004)#
dwd.output <- dwd(platform1.data=AFX, platform2.data=ILM, skip.match=TRUE)#
#
#Plot the AFX sample A data against the ILM sample A data#
plot(rowMeans(dwd.output$x[regexpr("_A",colnames(dwd.output$x)) != -1]), #
	 rowMeans(dwd.output$x[regexpr("_A",colnames(dwd.output$y)) != -1]),#
	 xlab="AFX", ylab="ILM")
??pamk
colRanks
??colRanks
?apply
x = data.frame(1:4,2:5)
x
apply(x,2,rank)
?rank
v = c(.5,.4,.3)
s1 = c(.5,.6,.7)
s2 = c(.5,.4,.7)
s3 = c(.5,.6,.3)
sum(s1)
sum(s2)
sum(s3)
runif(3)
?combinations
??combination
trial = function(n,k){#
	p = runif(n)#
	for (i in 0:n){#
			combn(p,i)#
		}#
	#
	}
trial(4)
trial = function(n,k){#
	p = runif(n)#
	for (i in 0:n){#
			print combn(p,i)#
		}#
	#
	}
trial = function(n,k){#
	p = runif(n)#
	for (i in 0:n){#
			print( combn(p,i))#
		}#
	#
	}
trial(4)
trial = function(n,k){#
	p = runif(n)#
	for (i in 0:n){#
			print( combn(i,i))#
		}#
	#
	}
trial(4)
trial = function(n){#
	p = runif(n)#
	for (i in 0:n){#
			print( combn(n,i))#
		}#
	#
	}
trial(4)
trial = function(n){#
	p = runif(n)#
	for (i in 0:n){#
			heads = combn(n,i)#
			apply(heads,1,function(x){p[x]})#
			#
		}#
	#
	}
trial(4)
trial = function(n){#
	p = runif(n)#
	for (i in 0:n){#
			heads = combn(n,i)#
			print(dim(heads))#
			apply(heads,1,function(x){p[x]})#
			#
		}#
	#
	}
trial(4)
trial = function(n){#
	p = runif(n)#
	for (i in 0:n){#
			heads = combn(n,i)#
			print(class(heads))#
			apply(heads,1,function(x){p[x]})#
			#
		}#
	#
	}
trial(4)
trial = function(n){#
	p = runif(n)#
	for (i in 0:n){#
			heads = combn(n,i)#
			dim(heads) = c(i,choose(n,i))#
			apply(heads,1,function(x){p[x]})#
			#
		}#
	#
	}
trial(4)
trial = function(n){#
	p = runif(n)#
	for (i in 0:n){#
			heads = combn(n,i)#
			dim(heads) = c(i,choose(n,i))#
			print(apply(heads,1,function(x){p[x]}))#
			#
		}#
	#
	}
trial(4)
trial = function(n){#
	p = runif(n)#
	for (i in 0:n){#
			heads = combn(n,i)#
			print(dim(heads) = c(i,choose(n,i)))#
			print(apply(heads,1,function(x){p[x]}))#
			#
		}#
	#
	}
trial = function(n){#
	p = runif(n)#
	for (i in 0:n){#
			heads = combn(n,i)#
			dim(heads) = c(i,choose(n,i))#
			print (heads)#
			print(apply(heads,1,function(x){p[x]}))#
			#
		}#
	#
	}
trial(4)
trial = function(n){#
	p = runif(n)#
	print(p)#
	for (i in 0:n){#
			heads = combn(n,i)#
			dim(heads) = c(i,choose(n,i))#
			print (heads)#
			print(apply(heads,1,function(x){p[x]}))#
			#
		}#
	#
	}
trial(4)
trial = function(n){#
	p = runif(n)#
	print(p)#
	for (i in 0:n){#
			heads = combn(n,i)#
			dim(heads) = c(i,choose(n,i))#
			print (heads)#
			print(apply(heads,1,function(x){c(p[x],p[~x]}))#
			#
		}#
	#
	}
trial = function(n){#
	p = runif(n)#
	print(p)#
	for (i in 0:n){#
			heads = combn(n,i)#
			dim(heads) = c(i,choose(n,i))#
			print (heads)#
			print(apply(heads,1,function(x){c(p[x],p[~x])}))#
			#
		}#
	#
	}
trial(4)
trial = function(n){#
	p = runif(n)#
	print(p)#
	for (i in 0:n){#
			heads = combn(n,i)#
			dim(heads) = c(i,choose(n,i))#
			print (heads)#
			print(apply(heads,1,function(x){c(p[x],p[!x])}))#
			#
		}#
	#
	}
trial(4)
p
s1
!s1
trial = function(n){#
	p = runif(n)#
	print(p)#
	for (i in 0:n){#
			headspots = combn(n,i)#
			heads = matrix(0,n,choose(n,i))#
			tails = matrix(0,n,choose(n,i))#
			apply(heads,2,function(x){heads[x]=1})#
			dim(heads) = c(i,choose(n,i))#
			print (heads)#
			print(apply(heads,1,function(x){c(p[x],p[x])}))#
			#
		}#
	#
	}#
	#
trial(4)
library(CONOR)
data(MAQC.ILM)
library(CONOR)
?MAQC.AFX
library(CONOR)
?MAQC.AFX
?ddply
??ddply
library(CONOR)
x = data.frame(1:5,2:6)
y = data.frame(2:6,1:5)
CONOR:::processplatforms
CONOR:::processplatforms(list(x,y),c(2,1))
x
y
z = data.frame(1:5,3:7)
CONOR:::processplatforms(list(x,z),c(1,1))
CONOR:::processplatforms(list(x,z))
x
y
rownames(x)
rownames(x)[1]="2"
rownames(x)[1]="a"
rownames(x)[2]="b"
rownames(y)[2]="a"
rownames(y)[1]="b"
x
y
CONOR:::processplatforms(list(x,y))
x
y
library(CONOR)
x = data.frame(1:5,2:6)
y
y = data.frame(2:6,1:5)
rownames(x)[1]="a"
rownames(x)[2]="b"
z = data.frame(1:5,3:7)
CONOR:::processplatforms(list(x,z),c(1,1))
CONOR:::processplatforms(list(x,y))
?merge
x
y
merge(x,y)
merge(x,y,0,0)
CONOR:::processplatforms(list(x,z),c(1,1))
.[
xcvad
ad
`.]`
`.[`
?data.frame
library(CONOR)
x = data.frame(1:5,2:6)
y = data.frame(2:6,1:5)
rownames(x)[1]="a"
rownames(x)[2]="b"
z = data.frame(1:5,3:7)
CONOR:::processplatforms(list(x,z),c(1,1))
library(CONOR)
x = data.frame(1:5,2:6)
y = data.frame(2:6,1:5)
rownames(x)[1]="a"
rownames(x)[2]="b"
z = data.frame(1:5,3:7)
CONOR:::processplatforms(list(x,z),c(1,1))
x
y
z
CONOR:::processplatforms(list(x,y),c(1,1))
library(socp)
library(CLSOCP)
?socp
#
#Load an example SOCP#
data(prob)#
#
#Solve the socp#
soln <- socp(prob$A, prob$b, prob$c, dim(prob$A)[2])
soln
install.packages('tseries')
install.packages('flexclust')
install.packages('fpc')
install.packages('plyr')
install.packages('outliers')
install.packages('nortest')
install.packages('fields')
source("http://bioconductor.org/biocLite.R")#
biocLite("limma")
source("http://bioconductor.org/biocLite.R")#
biocLite("preprocesscore")
source("http://bioconductor.org/biocLite.R")#
biocLite("preprocessCore")
library(CONOR)
library(CONOR)
ls
ls()
ls(namespace=CONOR)
?ls
CONOR
package.contents(CONOR)
library(CONOR)
library(help=CONOR)
CONOR:::ABI
CONOR:::AG1
library(CONOR)
?CONOR
library(help=CONOR)
#Load the Affymetrix data from the Microarray Quality Control Project (MAQC, Shi et al, 2006)#
data(MAQC.AFX)#
#
#Load the Illumina data from MAQC#
data(MAQC.ILM)#
#
#Perform Distance Weighted Discrimination (Takes 2-3 minutes, Benito et al, 2004)#
dwd.output <- dwd(platform1.data=AFX, platform2.data=ILM, skip.match=TRUE)
data(ABI)
data(MAQC.ABI)
ABI
MAQC.ABI
data(MAQC.ILM)
ILM
MAQC.ILM
 ‘ABI’ ‘AFX’ ‘AFX_MAQC_trans’ ‘AG1’ ‘ILM’ ‘ILM_MAQC_trans’ ‘AFX_sperm’#
 ‘AFX_sperm_trans’ ‘ILM_sperm’ ‘ILM_sperm_trans’
data(MAQC.ABI)
MAQC.ABI = ABI
save(MAQC.ABI,file="MAQC.ABI")
data(MAQC.AFX)
save(MAQC.AFX,file="MAQC.AFX")
MAQC.AFX = AFX
save(MAQC.AFX,file="MAQC.AFX")
data(MAQC.AFX.trans)
data(MAQC.AFX.transfer)
save(MAQC.AFX.tansfer,file="MAQC.AFX.transfer")
MAQC.AFX.transfer = AFX_MAQC_trans
save(MAQC.AFX.tansfer,file="MAQC.AFX.transfer")
save(MAQC.AFX.transfer,file="MAQC.AFX.transfer")
data(MAQC.ILM.transfer)
MAQC.ILM.transfer = ILM_MAQC_trans
data(SPERM.AFX.transfer)
SPERM.AFX.transfer = AFX_sperm_trans
save(SPERM.AFX.transfer,file="SPERM.AFX.transfer")
data(SPERM.ILM.transfer)
SPERM.ILM.transfer = ILM_sperm_trans
save(SPERM.ILM.transfer,file="SPERM.ILM.transfer")
data(SPERM.ILM)
SPERM.ILM = ILM_sperm
save(SPERM.ILM,file="SPERM.ILM")
data(SPERM.AFX)
SPERM.AFX = AFX_sperm
save(SPERM.AFX,file="SPERM.AFX")
data(MAQC.AG1)
MAQC.AG1 = AG1
save(MAQC.AG1,file="MAQC.AG1")
data(MAQC.ILM)
MAQC.ILM = ILM
save(MAQC.ILM,file="MAQC.ILM")
data(MAQC.ILM.transfer)
MAQC.ILM.transfer = ILM_MAQC_trans
save(MAQC.ILM.transfer,file="MAQC.ILM.transfer")
